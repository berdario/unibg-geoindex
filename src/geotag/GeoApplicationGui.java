package geotag;

import geotag.georeference.GeoRefLocation;
import geotag.search.ContentSearcher;
import geotag.visualization.GeoWordsTable;
import geotag.visualization.MarkerChart;
import geotag.visualization.ResultsTable;
import geotag.words.GeoRefDoc;
import geotag.words.GeographicWord;
import geotag.words.StringOperation;
import java.awt.Toolkit;
import java.io.File;
import java.lang.reflect.Method;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import java.sql.Statement;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;


public class GeoApplicationGui extends javax.swing.JFrame implements Runnable{
    //COSTANTI

    String DRIVER_CLASS_NAME = "org.postgresql.Driver";
    String DB_NAME = "geonamesDB";
    String USER_NAME = "postgres";
    String PASSWORD = "10choch";
    String DB_CONN_STRING = "jdbc:postgresql://localhost:5432/" + DB_NAME;
    //Variabili
    private String fileName = File.separator + "Desktop";
    File curDir = null; //Directory selezionata
    String selectedDocName = "";
    GeoApplication mainApp;
    private Vector<GeoRefDoc> lastresults = new Vector<GeoRefDoc>();

    /** Creates new form GeoApplication */
    public GeoApplicationGui() {
        mainApp = new GeoApplication(null);
        //definizione look and feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        }
        this.repaint();
        //caricamento componenti
        initComponents();
        //setto le dimensioni del pannello rispetto a quelle dello schermo
        this.setBounds(0, 0, (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth(), (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() - 30);
        //titolo che compare nella barra superiore del frame
        this.setTitle("GeoSearch");

        //Rendo INvisibili tabella e altri elementi
        resultsSplitPane.setVisible(false);
        problemLabel.setVisible(false);

    }



	    /** This method is called from within the constructor to
	     * initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is
	     * always regenerated by the Form Editor.
	     */
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        geoSearchPanel = new javax.swing.JPanel();
        queryPanel = new javax.swing.JPanel();
        queryTextField = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        locationPanel = new javax.swing.JPanel();
        locationTextField = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        resultsSplitPane = new javax.swing.JSplitPane();
        resultsPanel = new javax.swing.JPanel();
        visualizationSplitPane = new javax.swing.JSplitPane();
        graphicPanel = new javax.swing.JPanel();
        chartPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        listPanel = new javax.swing.JPanel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        jSlider = new javax.swing.JSlider();
        querySliderLabel = new javax.swing.JLabel();
        locationSliderLabel = new javax.swing.JLabel();
        gMapsPanel = new javax.swing.JPanel();
        gMapsButton = new javax.swing.JButton();
        gMapsLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        openDocButton = new javax.swing.JButton();
        GNEPanel = new javax.swing.JPanel();
        GNEScrollPane = new javax.swing.JScrollPane();
        GNETable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        problemLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        geoTaggingPanel = new javax.swing.JPanel();
        geoTagSplitPane = new javax.swing.JSplitPane();
        geoTagScrollPane = new javax.swing.JScrollPane();
        operationsTextArea = new javax.swing.JTextArea();
        geoTagPanel = new javax.swing.JPanel();
        fileChooserButton = new javax.swing.JButton();
        startGeoRefButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        tabbedPane.setName("tabbedPane"); // NOI18N

        geoSearchPanel.setName("geoSearchPanel"); // NOI18N

        queryPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        queryPanel.setName("queryPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(GeoApplicationGui.class);
        queryTextField.setFont(resourceMap.getFont("queryTextField.font")); // NOI18N
        queryTextField.setText(resourceMap.getString("queryTextField.text")); // NOI18N
        queryTextField.setToolTipText(resourceMap.getString("queryTextField.toolTipText")); // NOI18N
        queryTextField.setName("queryTextField"); // NOI18N
        queryTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                queryTextFieldMouseClicked(evt);
            }
        });
        queryTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                queryTextFieldFocusGained(evt);
            }
        });

        searchButton1.setIcon(resourceMap.getIcon("searchButton1.icon")); // NOI18N
        searchButton1.setToolTipText(resourceMap.getString("searchButton1.toolTipText")); // NOI18N
        searchButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        searchButton1.setBorderPainted(false);
        searchButton1.setDefaultCapable(false);
        searchButton1.setFocusPainted(false);
        searchButton1.setFocusable(false);
        searchButton1.setName("searchButton1"); // NOI18N
        searchButton1.setRequestFocusEnabled(false);
        searchButton1.setRolloverEnabled(false);
        searchButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                searchButton1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout queryPanelLayout = new javax.swing.GroupLayout(queryPanel);
        queryPanel.setLayout(queryPanelLayout);
        queryPanelLayout.setHorizontalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(queryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addContainerGap())
        );
        queryPanelLayout.setVerticalGroup(
            queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queryTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addContainerGap())
        );

        locationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        locationPanel.setName("locationPanel"); // NOI18N

        locationTextField.setFont(resourceMap.getFont("locationTextField.font")); // NOI18N
        locationTextField.setText(resourceMap.getString("locationTextField.text")); // NOI18N
        locationTextField.setToolTipText(resourceMap.getString("locationTextField.toolTipText")); // NOI18N
        locationTextField.setName("locationTextField"); // NOI18N
        locationTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locationTextFieldMouseClicked(evt);
            }
        });
        locationTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                locationTextFieldFocusGained(evt);
            }
        });

        searchButton2.setIcon(resourceMap.getIcon("searchButton2.icon")); // NOI18N
        searchButton2.setToolTipText(resourceMap.getString("searchButton2.toolTipText")); // NOI18N
        searchButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        searchButton2.setBorderPainted(false);
        searchButton2.setFocusPainted(false);
        searchButton2.setFocusable(false);
        searchButton2.setName("searchButton2"); // NOI18N
        searchButton2.setRequestFocusEnabled(false);
        searchButton2.setRolloverEnabled(false);
        searchButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                searchButton2MousePressed(evt);
            }
        });

        javax.swing.GroupLayout locationPanelLayout = new javax.swing.GroupLayout(locationPanel);
        locationPanel.setLayout(locationPanelLayout);
        locationPanelLayout.setHorizontalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );
        locationPanelLayout.setVerticalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(locationTextField)
                    .addComponent(searchButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchButton.setIcon(resourceMap.getIcon("searchButton.icon")); // NOI18N
        searchButton.setText(resourceMap.getString("searchButton.text")); // NOI18N
        searchButton.setToolTipText(resourceMap.getString("searchButton.toolTipText")); // NOI18N
        searchButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        searchButton.setName("searchButton"); // NOI18N
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                searchButtonMousePressed(evt);
            }
        });

        resultsSplitPane.setDividerLocation(400);
        resultsSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        resultsSplitPane.setName("resultsSplitPane"); // NOI18N

        resultsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resultsPanel.setName("resultsPanel"); // NOI18N

        visualizationSplitPane.setDividerLocation(400);
        visualizationSplitPane.setName("visualizationSplitPane"); // NOI18N

        graphicPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        graphicPanel.setName("graphicPanel"); // NOI18N

        chartPanel.setName("chartPanel"); // NOI18N

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        javax.swing.GroupLayout graphicPanelLayout = new javax.swing.GroupLayout(graphicPanel);
        graphicPanel.setLayout(graphicPanelLayout);
        graphicPanelLayout.setHorizontalGroup(
            graphicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphicPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
        );
        graphicPanelLayout.setVerticalGroup(
            graphicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphicPanelLayout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        visualizationSplitPane.setLeftComponent(graphicPanel);

        listPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        listPanel.setName("listPanel"); // NOI18N

        resultsScrollPane.setName("resultsScrollPane"); // NOI18N

        resultsTable.setFont(resourceMap.getFont("resultsTable.font")); // NOI18N
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Document name", "Text score", "Distance score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setGridColor(resourceMap.getColor("resultsTable.gridColor")); // NOI18N
        resultsTable.setName("resultsTable"); // NOI18N
        resultsTable.setRowHeight(20);
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        resultsScrollPane.setViewportView(resultsTable);

        jSlider.setName("jSlider"); // NOI18N

        querySliderLabel.setText(resourceMap.getString("querySliderLabel.text")); // NOI18N
        querySliderLabel.setName("querySliderLabel"); // NOI18N

        locationSliderLabel.setText(resourceMap.getString("locationSliderLabel.text")); // NOI18N
        locationSliderLabel.setName("locationSliderLabel"); // NOI18N

        gMapsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gMapsPanel.setName("gMapsPanel"); // NOI18N

        gMapsButton.setIcon(resourceMap.getIcon("gMapsButton.icon")); // NOI18N
        gMapsButton.setText(resourceMap.getString("gMapsButton.text")); // NOI18N
        gMapsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gMapsButton.setEnabled(false);
        gMapsButton.setName("gMapsButton"); // NOI18N
        gMapsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gMapsButtonMouseClicked(evt);
            }
        });

        gMapsLabel.setFont(resourceMap.getFont("gMapsLabel.font")); // NOI18N
        gMapsLabel.setText(resourceMap.getString("gMapsLabel.text")); // NOI18N
        gMapsLabel.setEnabled(false);
        gMapsLabel.setName("gMapsLabel"); // NOI18N

        javax.swing.GroupLayout gMapsPanelLayout = new javax.swing.GroupLayout(gMapsPanel);
        gMapsPanel.setLayout(gMapsPanelLayout);
        gMapsPanelLayout.setHorizontalGroup(
            gMapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gMapsPanelLayout.createSequentialGroup()
                .addComponent(gMapsButton)
                .addGap(94, 94, 94)
                .addComponent(gMapsLabel)
                .addContainerGap(136, Short.MAX_VALUE))
        );
        gMapsPanelLayout.setVerticalGroup(
            gMapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gMapsButton)
            .addGroup(gMapsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gMapsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        openDocButton.setBackground(resourceMap.getColor("openDocButton.background")); // NOI18N
        openDocButton.setIcon(resourceMap.getIcon("openDocButton.icon")); // NOI18N
        openDocButton.setText(resourceMap.getString("openDocButton.text")); // NOI18N
        openDocButton.setToolTipText(resourceMap.getString("openDocButton.toolTipText")); // NOI18N
        openDocButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        openDocButton.setName("openDocButton"); // NOI18N
        openDocButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openDocButtonMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                openDocButtonMousePressed(evt);
            }
        });

        javax.swing.GroupLayout listPanelLayout = new javax.swing.GroupLayout(listPanel);
        listPanel.setLayout(listPanelLayout);
        listPanelLayout.setHorizontalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listPanelLayout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(querySliderLabel)
                .addGap(18, 18, 18)
                .addComponent(jSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationSliderLabel)
                .addGap(120, 120, 120))
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gMapsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openDocButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        listPanelLayout.setVerticalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(querySliderLabel)
                    .addComponent(locationSliderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openDocButton, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(gMapsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        visualizationSplitPane.setRightComponent(listPanel);

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(visualizationSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1284, Short.MAX_VALUE)
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(visualizationSplitPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
        );

        resultsSplitPane.setTopComponent(resultsPanel);

        GNEPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        GNEPanel.setName("GNEPanel"); // NOI18N

        GNEScrollPane.setBackground(resourceMap.getColor("GNEScrollPane.background")); // NOI18N
        GNEScrollPane.setName("GNEScrollPane"); // NOI18N

        GNETable.setBackground(resourceMap.getColor("GNETable.background")); // NOI18N
        GNETable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        GNETable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location name", "GeoScore", "GeoReferenceValue", "Country code", "Admin 1 code", "Admin 2 code", "Latitude", "Longitude", "Population", "Elevation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GNETable.setEnabled(false);
        GNETable.setName("GNETable"); // NOI18N
        GNEScrollPane.setViewportView(GNETable);

        jLabel8.setFont(resourceMap.getFont("jLabel8.font")); // NOI18N
        jLabel8.setForeground(resourceMap.getColor("jLabel8.foreground")); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        javax.swing.GroupLayout GNEPanelLayout = new javax.swing.GroupLayout(GNEPanel);
        GNEPanel.setLayout(GNEPanelLayout);
        GNEPanelLayout.setHorizontalGroup(
            GNEPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GNEPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(GNEScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1260, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 1284, Short.MAX_VALUE)
        );
        GNEPanelLayout.setVerticalGroup(
            GNEPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GNEPanelLayout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GNEScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addContainerGap())
        );

        resultsSplitPane.setRightComponent(GNEPanel);

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        problemLabel.setFont(resourceMap.getFont("problemLabel.font")); // NOI18N
        problemLabel.setForeground(resourceMap.getColor("problemLabel.foreground")); // NOI18N
        problemLabel.setText(resourceMap.getString("problemLabel.text")); // NOI18N
        problemLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        problemLabel.setName("problemLabel"); // NOI18N

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        javax.swing.GroupLayout geoSearchPanelLayout = new javax.swing.GroupLayout(geoSearchPanel);
        geoSearchPanel.setLayout(geoSearchPanelLayout);
        geoSearchPanelLayout.setHorizontalGroup(
            geoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, geoSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(geoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resultsSplitPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1288, Short.MAX_VALUE)
                    .addComponent(problemLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1288, Short.MAX_VALUE)
                    .addGroup(geoSearchPanelLayout.createSequentialGroup()
                        .addGroup(geoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, geoSearchPanelLayout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(geoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel6)))
                            .addComponent(queryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(locationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        geoSearchPanelLayout.setVerticalGroup(
            geoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(geoSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(geoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(locationPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queryPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(geoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(geoSearchPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(geoSearchPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, geoSearchPanelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel9)))
                .addGap(18, 18, 18)
                .addComponent(resultsSplitPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(problemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab(resourceMap.getString("geoSearchPanel.TabConstraints.tabTitle"), geoSearchPanel); // NOI18N

        geoTaggingPanel.setName("geoTaggingPanel"); // NOI18N

        geoTagSplitPane.setDividerLocation(150);
        geoTagSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        geoTagSplitPane.setName("geoTagSplitPane"); // NOI18N

        geoTagScrollPane.setName("geoTagScrollPane"); // NOI18N

        operationsTextArea.setColumns(20);
        operationsTextArea.setRows(5);
        operationsTextArea.setName("operationsTextArea"); // NOI18N
        geoTagScrollPane.setViewportView(operationsTextArea);

        geoTagSplitPane.setBottomComponent(geoTagScrollPane);

        geoTagPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        geoTagPanel.setName("geoTagPanel"); // NOI18N

        fileChooserButton.setIcon(resourceMap.getIcon("fileChooserButton.icon")); // NOI18N
        fileChooserButton.setText(resourceMap.getString("fileChooserButton.text")); // NOI18N
        fileChooserButton.setName("fileChooserButton"); // NOI18N
        fileChooserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fileChooserButtonMousePressed(evt);
            }
        });

        startGeoRefButton.setIcon(resourceMap.getIcon("startGeoRefButton.icon")); // NOI18N
        startGeoRefButton.setText(resourceMap.getString("startGeoRefButton.text")); // NOI18N
        startGeoRefButton.setEnabled(false);
        startGeoRefButton.setName("startGeoRefButton"); // NOI18N
        startGeoRefButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                startGeoRefButtonMousePressed(evt);
            }
        });

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        javax.swing.GroupLayout geoTagPanelLayout = new javax.swing.GroupLayout(geoTagPanel);
        geoTagPanel.setLayout(geoTagPanelLayout);
        geoTagPanelLayout.setHorizontalGroup(
            geoTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, geoTagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(geoTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileChooserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startGeoRefButton, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(geoTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE))
                .addGap(848, 848, 848))
        );
        geoTagPanelLayout.setVerticalGroup(
            geoTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(geoTagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(geoTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(geoTagPanelLayout.createSequentialGroup()
                        .addComponent(fileChooserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startGeoRefButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(geoTagPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))))
        );

        geoTagSplitPane.setLeftComponent(geoTagPanel);

        errorLabel.setFont(resourceMap.getFont("errorLabel.font")); // NOI18N
        errorLabel.setForeground(resourceMap.getColor("errorLabel.foreground")); // NOI18N
        errorLabel.setText(resourceMap.getString("errorLabel.text")); // NOI18N
        errorLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        errorLabel.setName("errorLabel"); // NOI18N

        javax.swing.GroupLayout geoTaggingPanelLayout = new javax.swing.GroupLayout(geoTaggingPanel);
        geoTaggingPanel.setLayout(geoTaggingPanelLayout);
        geoTaggingPanelLayout.setHorizontalGroup(
            geoTaggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, geoTaggingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(geoTaggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(geoTagSplitPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1288, Short.MAX_VALUE)
                    .addComponent(errorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1288, Short.MAX_VALUE))
                .addContainerGap())
        );
        geoTaggingPanelLayout.setVerticalGroup(
            geoTaggingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, geoTaggingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(geoTagSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab(resourceMap.getString("geoTaggingPanel.TabConstraints.tabTitle"), geoTaggingPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1316, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


	    private void fileChooserButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileChooserButtonMousePressed
	        File currentDir = new File(fileName);
	        JFileChooser chooser = new JFileChooser();
	        chooser.setCurrentDirectory(currentDir);

	        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	        chooser.setFileFilter(new MyFileExtensionFilter());

	        JFrame fcFrame = new JFrame();
	        int result = chooser.showOpenDialog(fcFrame);

	        if (result == JFileChooser.APPROVE_OPTION)
	        {
	            curDir = chooser.getSelectedFile(); //Directory selezionata
	            try{
	                //Stampo il nome della directory
	                //dirNameDxLabel.setText(curDir.getName());
	                startGeoRefButton.setEnabled(true);
	            }
	            catch (Exception e){
	                e.printStackTrace();
	            }
	        }
	    }//GEN-LAST:event_fileChooserButtonMousePressed

            private void startGeoRefButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startGeoRefButtonMousePressed
	        startGeoRefButton.setEnabled(false);
	        startGeoRefButton.setFocusable(false);

	        String errortext=mainApp.createIndex(curDir);

	        if (!errortext.equals("")){
	        	errorLabel.setText(errortext);
	        }

	        operationsTextArea.append("Stop analysis...\n");
	        operationsTextArea.append("**********\n");

	        startGeoRefButton.setEnabled(true);
	        startGeoRefButton.setFocusable(true);
	    }//GEN-LAST:event_startGeoRefButtonMousePressed

	    private void searchButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMousePressed
	        resultsSplitPane.setVisible(true);
	        problemLabel.setVisible(true);
	        GNETable.setEnabled(false);

	        GeographicWord geoLocation = new GeographicWord();
	        String keyWords = "";
	        String location = "";
	        String country = "";
	        String zone = "";

	        //Leggo i parametri
	        keyWords = queryTextField.getText();
	        location = locationTextField.getText();

	        if(!keyWords.isEmpty()){

	            	//resultsmerge.clear();
	                // --> Creazione del RANKING testuale
	                ContentSearcher content = new ContentSearcher();
	                lastresults = content.createTextualRanking(keyWords);



	                // --> Georeferenziazione della LOCATION
	                if(!location.isEmpty()){
	                    //DatabaseGazetteerConnection dbConnection;

	                    try {
	                        GeoRefLocation grLoc = new GeoRefLocation();
	                        geoLocation = grLoc.getGeoLocation(location);

	                    }
	                    catch (Exception e) {
	                    	System.out.print("Errore in Ricerca");
                                e.printStackTrace();
						}
		//                    catch (InstantiationException ex) {
		//                        Logger.getLogger(GeoApplication.class.getName()).log(Level.SEVERE, null, ex);
		//                    } catch (IllegalAccessException ex) {
		//                        Logger.getLogger(GeoApplication.class.getName()).log(Level.SEVERE, null, ex);
		//                    } catch (ClassNotFoundException ex) {
		//                        Logger.getLogger(GeoApplication.class.getName()).log(Level.SEVERE, null, ex);
		//                    } catch (SQLException ex) {
		//                        Logger.getLogger(GeoApplication.class.getName()).log(Level.SEVERE, null, ex);
		//                    }

	                }

	                if(geoLocation.isLocation()){
	                    //Rendo visibili tabella e altri elementi
	                    if(resultsTable.isVisible() == false)
	                        resultsTable.setVisible(true);
	                    if(jSlider.isVisible() == false)
	                        jSlider.setVisible(true);
	                    if(querySliderLabel.isVisible() == false)
	                        querySliderLabel.setVisible(true);
	                    if(locationSliderLabel.isVisible() == false)
	                        locationSliderLabel.setVisible(true);
	                    if(gMapsPanel.isVisible() == false)
	                        gMapsPanel.setVisible(true);


	                    lastresults=mainApp.search(keyWords, location);

	                    // --> Creazione del RANKING geografico
	                    // Se il documento non è georeferenziato ritorna ZERO come distanceScore
	                    //	VECCHIO CODICE
	                    //DistanceSearcher distance = new DistanceSearcher();
	                    //distance.createDistanceRanking(results, geoLocation);

	                    // --> Visualizzazione dei risultati su doppi assi (JFreeChart API)
	                    final MarkerChart chart = new MarkerChart(geoLocation.getName(), lastresults, chartPanel);
	                    chart.pack();

	                    // --> Visualizzazione dei risultati in una tabella
	                    final ResultsTable table = new ResultsTable();
	                    table.createTable(resultsTable, lastresults, 50);

	                    // --> Calcolo del RANKING distribuito ed aggiorno la tabella dei risultati
	                    jSlider.setEnabled(true);
	                    jSlider.addChangeListener(new ChangeListener() {
	                        public void stateChanged(ChangeEvent e) {
	                            table.createTable(resultsTable, lastresults, ((JSlider) e.getSource()).getValue());
	                        }
	                    });
	                    /*
	                    resultsTable.addMouseListener(new MouseAdapter() {
	                        @Override
	                        public void mouseClicked(MouseEvent evt) {
	                            if(evt.getButton() == 3) {
	                                System.out.println("Right Click........");
	                                // Mouse left click should be forced here to select the row.

	                            }
	                            if(evt.getButton() == 1) {
	                                System.out.println("Mouse LEFT CLICK FORCED.....");
	                            }
	                        }
	                    });
	                    */
	                }
	                else
	                    problemLabel.setText("\'Location\' field isn't a geo-location");
	            /*
	            } catch (java.text.ParseException ex) {
	                problemLabel.setText("Error query parse");
	            } catch (SQLException ex) {
	                problemLabel.setText("Error query commit");
	            } catch (InstantiationException ex) {
	                problemLabel.setText("Error DataBase connection");
	            } catch (IllegalAccessException ex) {
	                problemLabel.setText("Error DataBase access");
	                */

	        }else
	            problemLabel.setText("I campi query o location sono vuoti. Inserire dei valori.");

	    }//GEN-LAST:event_searchButtonMousePressed

	    private void gMapsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gMapsButtonMouseClicked
	        File gMapsDir = new File("./output/GMaps");

	        String documentWithoutExtension = selectedDocName.substring(0, selectedDocName.lastIndexOf('.'));
	        String gMapsDoc = documentWithoutExtension + "_map.html";

	        //Correggo link
	        gMapsDoc = StringOperation.convertUrl(gMapsDoc);

	        if(gMapsDir.isDirectory()){
	            File docFile = new File("./output/GMaps" + gMapsDoc);
	            if (!docFile.isDirectory()){
	                openPage(gMapsDoc);
	            }
	        }

	    }//GEN-LAST:event_gMapsButtonMouseClicked

	    private void searchButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButton1MousePressed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_searchButton1MousePressed

	    private void searchButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButton2MousePressed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_searchButton2MousePressed

	    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
	        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
	            public void mousePressed(java.awt.event.MouseEvent evt) {
	                int count=evt.getClickCount();
	                if(count==2){
	                    //System.out.println("HO sentito il doppio click");
	                    //CATTURARE EVENTO
	                    try{
	                        for(int i=0; i<resultsTable.getSelectedRowCount(); i++){
	                            selectedDocName = (String) resultsTable.getValueAt(resultsTable.getSelectedRows()[i],1);

	                            gMapsButton.setEnabled(true);
	                            GNETable.setEnabled(true);

	                            //Popolo la tabella
	                            GeoWordsTable table = new GeoWordsTable(GNETable, lastresults, selectedDocName);

	                        }
	                    }catch(Exception ex){
	                        ex.printStackTrace();
	                    }
	                }
	            }

	        }
	        );
	    }//GEN-LAST:event_resultsTableMouseClicked

	    private void queryTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryTextFieldMouseClicked
	        queryTextField.setText("");
	    }//GEN-LAST:event_queryTextFieldMouseClicked

	    private void locationTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationTextFieldMouseClicked
	        locationTextField.setText("");
	    }//GEN-LAST:event_locationTextFieldMouseClicked

	    private void queryTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_queryTextFieldFocusGained
	        queryTextField.setText("");
	    }//GEN-LAST:event_queryTextFieldFocusGained

	    private void locationTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_locationTextFieldFocusGained
	        locationTextField.setText("");
	    }//GEN-LAST:event_locationTextFieldFocusGained

	    private void openDocButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openDocButtonMousePressed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_openDocButtonMousePressed

	    private void openDocButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openDocButtonMouseClicked
	        // APERTURA DOCUMENTO
	        openDoc(selectedDocName);
	    }//GEN-LAST:event_openDocButtonMouseClicked


	    public void openDoc(String docName){
	        String url = "./docs/" + docName;
	        String errMsg = "Error attempting to open document";
	        String osName = System.getProperty("os.name");

	        if(docName != null)
	            if(docName.contains(".")){
	                String docExtension = docName.substring(docName.lastIndexOf('.') + 1, docName.length());
	                String docNameWithoutExtension = docName.substring(0, docName.lastIndexOf('.'));
	            }else
	                problemLabel.setText("Error open document " + docName);
	        else
	            problemLabel.setText("No document is selected");


	        try {
	            //if(docExtension.equalsIgnoreCase("html") || docExtension.equalsIgnoreCase("htm")
	            //    || docExtension.equalsIgnoreCase("xml")){
	                if (osName.startsWith("Mac OS")) {
	                    Class fileMgr = Class.forName("com.apple.eio.FileManager");
	                    Method openURL = fileMgr.getDeclaredMethod("openURL", new Class[] {String.class});
	                    openURL.invoke(null, new Object[] {url});
	                } else if (osName.startsWith("Windows"))
	                    Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);
	                else {  //assume Unix or Linux
	                    String[] browsers = { "firefox", "opera", "konqueror", "epiphany", "mozilla", "netscape" };
	                    String browser = null;
	                    for (int count = 0; count < browsers.length && browser == null; count++)
	                        if (Runtime.getRuntime().exec( new String[] {"which", browsers[count]}).waitFor() == 0)
	                            browser = browsers[count];//TODO è meglio usare gnome-open, xdg-open e l'equivalente kde
	                    if (browser == null) throw new Exception("Could not find web browser");
	                    else Runtime.getRuntime().exec(browser + " " + url);
	                }
	            //}
	            /*else if(docExtension.equalsIgnoreCase("pdf")){
	                if (osName.startsWith("Mac OS")) {
	                    Runtime.getRuntime().exec("open " + url);
	                } else if (osName.startsWith("Windows"))
	                    Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);
	                else {  //assume Unix or Linux
	                    String docContent = openPDFDocument(url);


	                }
	            }   */
	        } catch (Exception e) {
	            problemLabel.setText(errMsg + ":\n" + e.getLocalizedMessage());
	        }
	    }

	    /**
	     * Metodo che apre attraverso un web browser la mappa del file selezionato
	     * @param gMapsDoc : nome del file (HTML) da aprire
	     */
	    public void openPage(String gMapsDoc) {
	        String url = "./output/GMaps/" + gMapsDoc;
	        String errMsg = "Error attempting to launch web browser";
	        String osName = System.getProperty("os.name");
	        try {
	            if (osName.startsWith("Mac OS")) {
	                Class fileMgr = Class.forName("com.apple.eio.FileManager");
	                Method openURL = fileMgr.getDeclaredMethod("openURL", new Class[] {String.class});
	                openURL.invoke(null, new Object[] {url});
	            } else if (osName.startsWith("Windows"))
	                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + url);
	            else {  //assume Unix or Linux
	                String[] browsers = { "firefox", "opera", "konqueror", "epiphany", "mozilla", "netscape" };
	                String browser = null;
	                for (int count = 0; count < browsers.length && browser == null; count++)
	                    if (Runtime.getRuntime().exec( new String[] {"which", browsers[count]}).waitFor() == 0)
	                        browser = browsers[count];
	                if (browser == null) throw new Exception("Could not find web browser");
	                else Runtime.getRuntime().exec(browser + " " + url);
	            }
	        } catch (Exception e) {
	            problemLabel.setText(errMsg + ":\n" + e.getLocalizedMessage());
	        }
	    }

	    /**
	     * Metodo che accede al DataBase per reperire tutte le Nazioni
	     * @param table
	     * @param countryCode
	     * @param stmt
	     * @return
	     * @throws java.sql.SQLException
	     */
	    private Vector<String> selectItems(String table, String countryCode, Statement stmt) throws SQLException{
	        Vector<String> countries = new Vector<String>();
	        String query = "";

	        if(table.equals("countryinfo"))
	            query = "SELECT name FROM " + table;
	        else if(table.equals("geoname")){
	            query = "SELECT asciiname FROM " + table + " WHERE countrycode='" + countryCode + "'";
	        }

	        ResultSet result = stmt.executeQuery(query);

	        while (result.next()) {
	            countries.add(result.getString(1));
	        }

	        return countries;
	    }





    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GNEPanel;
    private javax.swing.JScrollPane GNEScrollPane;
    private javax.swing.JTable GNETable;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JButton gMapsButton;
    private javax.swing.JLabel gMapsLabel;
    private javax.swing.JPanel gMapsPanel;
    private javax.swing.JPanel geoSearchPanel;
    private javax.swing.JPanel geoTagPanel;
    private javax.swing.JScrollPane geoTagScrollPane;
    private javax.swing.JSplitPane geoTagSplitPane;
    private javax.swing.JPanel geoTaggingPanel;
    private javax.swing.JPanel graphicPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSlider jSlider;
    private javax.swing.JPanel listPanel;
    private javax.swing.JPanel locationPanel;
    private javax.swing.JLabel locationSliderLabel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JButton openDocButton;
    private javax.swing.JTextArea operationsTextArea;
    private javax.swing.JLabel problemLabel;
    private javax.swing.JPanel queryPanel;
    private javax.swing.JLabel querySliderLabel;
    private javax.swing.JTextField queryTextField;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JSplitPane resultsSplitPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton startGeoRefButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JSplitPane visualizationSplitPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        setVisible(true);
    }

}


